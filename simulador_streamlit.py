import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

# --- Cargar datos ---
df = pd.read_csv("demanda_historica_y_predicha.csv", parse_dates=["Fecha"])
df = df.sort_values("Fecha")

# --- Par√°metros desde la interfaz ---
st.sidebar.header("üîß Par√°metros de Simulaci√≥n")

H = st.sidebar.slider("Radiaci√≥n Solar H (kWh/m¬≤)", 1.0, 8.0, 4.5, step=0.1)
PR = st.sidebar.slider("Performance Ratio (PR)", 0.60, 0.95, 0.80, step=0.01)

horizonte = st.sidebar.selectbox("Horizonte de Predicci√≥n", ["7 d√≠as", "15 d√≠as", "30 d√≠as"])
dias = int(horizonte.split()[0])

st.sidebar.subheader("Escenarios de Capacidad")
escenarios = {
    "Peque√±a (100 kW)": st.sidebar.checkbox("Peque√±a (100 kW)", value=True),
    "Mediana (1 MW)": st.sidebar.checkbox("Mediana (1 MW)", value=True),
    "Grande (5 MW)": st.sidebar.checkbox("Grande (5 MW)", value=True)
}

kwh_por_litro = st.sidebar.number_input("kWh/L (Diesel)", value=3.0, step=0.1)
co2_por_litro = st.sidebar.number_input("CO‚ÇÇ/L (kg)", value=2.2, step=0.1)
cop_diesel = st.sidebar.number_input("COP/L (Precio diesel)", value=2553.59, step=10.0)

# --- Filtrar datos predichos por cantidad de d√≠as ---
df_predicha = df[df["Tipo"] == "predicha"].copy()
df_sim = df_predicha.head(dias)  # üëà Asegura que siempre haya datos
# st.write(f"N√∫mero de registros predichos cargados: {len(df_sim)}")  # √ötil para depuraci√≥n

# --- T√≠tulo y explicaci√≥n ---
st.title("‚òÄÔ∏è Simulaci√≥n de Energ√≠a Solar - Leticia, Colombia")

st.subheader("üìà Demanda Energ√©tica Predicha (Horizonte Seleccionado)")
st.markdown(f"üóìÔ∏è Mostrando demanda energ√©tica para los pr√≥ximos **30 d√≠as** predichos.")
# Asegurarse de que los tipos est√°n normalizados (evita errores de color_discrete_map)

# --- Asegurar formato y consistencia en los tipos ---
df["Tipo"] = df["Tipo"].str.capitalize()
df = df.sort_values("Fecha")

# --- Detectar la fecha de inicio de predicci√≥n ---
if "Predicha" in df["Tipo"].unique():
    inicio_pred = df[df["Tipo"] == "Predicha"]["Fecha"].min()
else:
    inicio_pred = None

# --- Crear la gr√°fica de l√≠nea ---
fig = px.line(
    df,
    x="Fecha",
    y="ACTIVA",
    color="Tipo",
    color_discrete_map={
        "Hist√≥rica": "#1d7a8d",
        "Predicha": "#ff6f00",
    },
    labels={
        "Fecha": "Fecha",
        "ACTIVA": "Demanda Energ√©tica (kWh)",
        "Tipo": "Tipo"
    },
    title="Serie Temporal de Demanda Energ√©tica"
)

# --- Mejorar est√©tica ---
fig.update_traces(mode="lines+markers")
fig.update_layout(
    template="plotly_white",
    title_font=dict(size=20, family="Arial", color="#333"),
    xaxis_title_font=dict(size=16),
    yaxis_title_font=dict(size=16),
    legend=dict(title="", orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
    margin=dict(l=30, r=30, t=50, b=30)
)

# --- Mostrar gr√°fico en Streamlit ---
st.plotly_chart(fig, use_container_width=True)

# --- Beneficios por escenario ---
st.subheader("üåû Beneficios por Escenario Solar")
st.markdown(f"üßÆ C√°lculo acumulado de beneficios para un horizonte de **{dias} d√≠as**.")

resultados = []

def calcular_beneficios(capacidad_kw, label):
    energia_generada_kwh = capacidad_kw * H * PR * dias
    diesel_ahorrado_l = energia_generada_kwh / kwh_por_litro
    co2_ev_l = diesel_ahorrado_l * co2_por_litro
    ahorro_cop = diesel_ahorrado_l * cop_diesel

    resultados.append({
        "Escenario": label,
        "Energ√≠a (kWh)": energia_generada_kwh,
        "Di√©sel Ahorrado (L)": diesel_ahorrado_l,
        "CO‚ÇÇ Evitado (kg)": co2_ev_l,
        "Ahorro Econ√≥mico (COP)": ahorro_cop
    })

    st.metric(f"{label} - Energ√≠a Generada Total", f"{energia_generada_kwh:,.0f} kWh")
    st.metric(f"{label} - Di√©sel Ahorrado", f"{diesel_ahorrado_l:,.0f} L")
    st.metric(f"{label} - CO‚ÇÇ Evitado", f"{co2_ev_l:,.0f} kg")
    st.metric(f"{label} - Ahorro Econ√≥mico", f"${ahorro_cop:,.0f} COP")

for nombre, activo in escenarios.items():
    if activo:
        capacidad_kw = 100 if "Peque√±a" in nombre else 1000 if "Mediana" in nombre else 5000
        with st.expander(f"üîã Resultados para {nombre}"):
            calcular_beneficios(capacidad_kw, nombre)

# --- Gr√°fica de barras logar√≠tmica para comparaci√≥n ---
if resultados:
    st.subheader("üìä Comparativa de Beneficios por Escenario")
    df_resultados = pd.DataFrame(resultados)

    fig_barras = px.bar(
        df_resultados.melt(id_vars="Escenario"),
        x="variable", y="value", color="Escenario",
        barmode="group",
        labels={"variable": "Indicador", "value": "Valor"},
        title="Comparativa de Beneficios"
    )

    fig_barras.update_layout(xaxis_title="", legend_title="Escenario")
    fig_barras.update_yaxes(type="log", title="Valor (escala logar√≠tmica)")
    st.plotly_chart(fig_barras, use_container_width=True)

# --- Nota final ---
st.caption("Datos de demanda simulada para Leticia, Amazonas. Par√°metros personalizables para an√°lisis energ√©tico, econ√≥mico y ambiental.")